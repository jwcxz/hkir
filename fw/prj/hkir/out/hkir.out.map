Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o (exit)
/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
                              ./out/main.o (__do_copy_data)
/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                              ./out/uart_rb.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

uart_rxbuf          0x40              ./out/uart_rb.o
uart_txbuf          0x1               ./out/uart_rb.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
LOAD /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/libm.a
LOAD ./out/main.o
LOAD ./out/ir.o
LOAD ./out/uart_rb.o
LOAD ./out/uart.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x482
 *(.vectors)
 .vectors       0x0000000000000000       0x68 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000068                . = ALIGN (0x2)
                0x0000000000000068                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000068        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000068                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000068                __ctors_start = .
 *(.ctors)
                0x0000000000000068                __ctors_end = .
                0x0000000000000068                __dtors_start = .
 *(.dtors)
                0x0000000000000068                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000068        0x0 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
                0x0000000000000068                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000068        0xc /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000074       0x16 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
                0x0000000000000074                __do_copy_data
 .init4         0x000000000000008a       0x10 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                0x000000000000008a                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000000000009a        0x8 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 *(.init9)
 *(.text)
 .text          0x00000000000000a2        0x4 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
                0x00000000000000a2                __vector_22
                0x00000000000000a2                __vector_1
                0x00000000000000a2                __vector_24
                0x00000000000000a2                __vector_12
                0x00000000000000a2                __bad_interrupt
                0x00000000000000a2                __vector_6
                0x00000000000000a2                __vector_3
                0x00000000000000a2                __vector_23
                0x00000000000000a2                __vector_25
                0x00000000000000a2                __vector_11
                0x00000000000000a2                __vector_13
                0x00000000000000a2                __vector_17
                0x00000000000000a2                __vector_7
                0x00000000000000a2                __vector_5
                0x00000000000000a2                __vector_4
                0x00000000000000a2                __vector_9
                0x00000000000000a2                __vector_2
                0x00000000000000a2                __vector_21
                0x00000000000000a2                __vector_15
                0x00000000000000a2                __vector_8
                0x00000000000000a2                __vector_14
                0x00000000000000a2                __vector_10
                0x00000000000000a2                __vector_16
                0x00000000000000a2                __vector_20
 .text          0x00000000000000a6        0x0 ./out/main.o
 .text          0x00000000000000a6       0xe0 ./out/ir.o
                0x00000000000000a6                ir_init
                0x00000000000000aa                ir_xmit_hdr
                0x00000000000000e0                ir_xmit
                0x0000000000000106                ir_send
 .text          0x0000000000000186      0x174 ./out/uart_rb.o
                0x0000000000000186                uart_rb_rxh
                0x00000000000001c8                uart_rb_txh
                0x0000000000000212                uart_rb_init
                0x0000000000000254                uart_rb_data_rdy
                0x000000000000025a                uart_rb_rx
                0x00000000000002aa                uart_rb_tx
 .text          0x00000000000002fa      0x134 ./out/uart.o
                0x00000000000002fa                uart_init
                0x0000000000000336                uart_enable
                0x0000000000000364                uart_disable
                0x0000000000000370                __vector_18
                0x00000000000003e0                __vector_19
 .text          0x000000000000042e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text          0x000000000000042e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text          0x000000000000042e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                0x000000000000042e                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x000000000000042e       0x50 ./out/main.o
                0x000000000000042e                main
 .text.libgcc.mul
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.div
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                0x000000000000047e                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000000000000047e        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
                0x000000000000047e                exit
                0x000000000000047e                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000000000000047e        0x4 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x0000000000000482                _etext = .

.data           0x0000000000800100       0x2c load address 0x0000000000000482
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 .data          0x0000000000800100       0x23 ./out/main.o
 .data          0x0000000000800123        0x0 ./out/ir.o
 .data          0x0000000000800123        0x8 ./out/uart_rb.o
                0x0000000000800123                uart_txbuf_optr
                0x0000000000800125                uart_txbuf_iptr
                0x0000000000800127                uart_rxbuf_optr
                0x0000000000800129                uart_rxbuf_iptr
 .data          0x000000000080012b        0x0 ./out/uart.o
 .data          0x000000000080012b        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .data          0x000000000080012b        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .data          0x000000000080012b        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x000000000080012c                . = ALIGN (0x2)
 *fill*         0x000000000080012b        0x1 
                0x000000000080012c                _edata = .
                0x000000000080012c                PROVIDE (__data_end, .)

.bss            0x000000000080012c       0x47
                0x000000000080012c                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x000000000080012c        0x0 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 .bss           0x000000000080012c        0x0 ./out/main.o
 .bss           0x000000000080012c        0x0 ./out/ir.o
 .bss           0x000000000080012c        0x2 ./out/uart_rb.o
                0x000000000080012c                uart_txbuf_count
                0x000000000080012d                uart_rxbuf_count
 .bss           0x000000000080012e        0x4 ./out/uart.o
                0x000000000080012e                rx_handler
                0x0000000000800130                tx_handler
 .bss           0x0000000000800132        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000800132        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .bss           0x0000000000800132        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800132       0x41 ./out/uart_rb.o
                0x0000000000800132                uart_rxbuf
                0x0000000000800172                uart_txbuf
                0x0000000000800173                PROVIDE (__bss_end, .)
                0x0000000000000482                __data_load_start = LOADADDR (.data)
                0x00000000000004ae                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800173        0x0
                0x0000000000800173                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800173                PROVIDE (__noinit_end, .)
                0x0000000000800173                _end = .
                0x0000000000800173                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x1e6c
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 .stab          0x00000000000006cc      0x600 ./out/main.o
                                        0x60c (size before relaxing)
 .stab          0x0000000000000ccc      0x564 ./out/ir.o
                                        0x750 (size before relaxing)
 .stab          0x0000000000001230      0x6e4 ./out/uart_rb.o
                                        0x8dc (size before relaxing)
 .stab          0x0000000000001914      0x558 ./out/uart.o
                                        0x750 (size before relaxing)

.stabstr        0x0000000000000000     0x1067
 *(.stabstr)
 .stabstr       0x0000000000000000     0x1067 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 ./out/main.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 ./out/ir.o
 .comment       0x0000000000000000       0x12 ./out/uart_rb.o
 .comment       0x0000000000000000       0x12 ./out/uart.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(./out/hkir.out elf32-avr)
LOAD linker stubs
