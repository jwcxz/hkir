GAS LISTING /tmp/ccS9MIwy.s 			page 1


   1               		.file	"ir.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/j/projects/hkir/fw/prj/hkir/",100,0,2,.Ltext0
   8               		.stabs	"../../lib/ir.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,0,0
  13               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,0,0
  14               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,0,0
  15               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,0,0
  16               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,0,0
  17               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,0,
  18               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,0,0
  19               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,0,0
  20               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,0,0
  21               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,0,0
  23               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,0,0
  24               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,0,0
  25               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,0,0
  26               		.stabs	"short _Fract:t(0,15)=r(0,1);1;0;",128,0,0,0
  27               		.stabs	"_Fract:t(0,16)=r(0,1);2;0;",128,0,0,0
  28               		.stabs	"long _Fract:t(0,17)=r(0,1);4;0;",128,0,0,0
  29               		.stabs	"long long _Fract:t(0,18)=r(0,1);8;0;",128,0,0,0
  30               		.stabs	"unsigned short _Fract:t(0,19)=r(0,1);1;0;",128,0,0,0
  31               		.stabs	"unsigned _Fract:t(0,20)=r(0,1);2;0;",128,0,0,0
  32               		.stabs	"unsigned long _Fract:t(0,21)=r(0,1);4;0;",128,0,0,0
  33               		.stabs	"unsigned long long _Fract:t(0,22)=r(0,1);8;0;",128,0,0,0
  34               		.stabs	"_Sat short _Fract:t(0,23)=r(0,1);1;0;",128,0,0,0
  35               		.stabs	"_Sat _Fract:t(0,24)=r(0,1);2;0;",128,0,0,0
  36               		.stabs	"_Sat long _Fract:t(0,25)=r(0,1);4;0;",128,0,0,0
  37               		.stabs	"_Sat long long _Fract:t(0,26)=r(0,1);8;0;",128,0,0,0
  38               		.stabs	"_Sat unsigned short _Fract:t(0,27)=r(0,1);1;0;",128,0,0,0
  39               		.stabs	"_Sat unsigned _Fract:t(0,28)=r(0,1);2;0;",128,0,0,0
  40               		.stabs	"_Sat unsigned long _Fract:t(0,29)=r(0,1);4;0;",128,0,0,0
  41               		.stabs	"_Sat unsigned long long _Fract:t(0,30)=r(0,1);8;0;",128,0,0,0
  42               		.stabs	"short _Accum:t(0,31)=r(0,1);2;0;",128,0,0,0
  43               		.stabs	"_Accum:t(0,32)=r(0,1);4;0;",128,0,0,0
  44               		.stabs	"long _Accum:t(0,33)=r(0,1);8;0;",128,0,0,0
  45               		.stabs	"long long _Accum:t(0,34)=r(0,1);8;0;",128,0,0,0
  46               		.stabs	"unsigned short _Accum:t(0,35)=r(0,1);2;0;",128,0,0,0
  47               		.stabs	"unsigned _Accum:t(0,36)=r(0,1);4;0;",128,0,0,0
  48               		.stabs	"unsigned long _Accum:t(0,37)=r(0,1);8;0;",128,0,0,0
  49               		.stabs	"unsigned long long _Accum:t(0,38)=r(0,1);8;0;",128,0,0,0
  50               		.stabs	"_Sat short _Accum:t(0,39)=r(0,1);2;0;",128,0,0,0
  51               		.stabs	"_Sat _Accum:t(0,40)=r(0,1);4;0;",128,0,0,0
  52               		.stabs	"_Sat long _Accum:t(0,41)=r(0,1);8;0;",128,0,0,0
  53               		.stabs	"_Sat long long _Accum:t(0,42)=r(0,1);8;0;",128,0,0,0
  54               		.stabs	"_Sat unsigned short _Accum:t(0,43)=r(0,1);2;0;",128,0,0,0
  55               		.stabs	"_Sat unsigned _Accum:t(0,44)=r(0,1);4;0;",128,0,0,0
  56               		.stabs	"_Sat unsigned long _Accum:t(0,45)=r(0,1);8;0;",128,0,0,0
  57               		.stabs	"_Sat unsigned long long _Accum:t(0,46)=r(0,1);8;0;",128,0,0,0
GAS LISTING /tmp/ccS9MIwy.s 			page 2


  58               		.stabs	"void:t(0,47)=(0,47)",128,0,0,0
  59               		.stabs	"./config.h",130,0,0,0
  60               		.stabs	"../../inc/config_top.h",130,0,0,0
  61               		.stabs	"/usr/avr/include/inttypes.h",130,0,0,0
  62               		.stabs	"/usr/lib/gcc/avr/4.8.2/include/stdint.h",130,0,0,0
  63               		.stabs	"/usr/avr/include/stdint.h",130,0,0,0
  64               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  65               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  66               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  67               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  68               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  69               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  70               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  71               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  72               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  73               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  74               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  75               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  76               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  77               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  78               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  79               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  80               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  81               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  82               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  83               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  84               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  85               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  86               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
  87               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  88               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  89               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  90               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  91               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  92               		.stabn	162,0,0,0
  93               		.stabn	162,0,0,0
  94               		.stabs	"int_farptr_t:t(3,1)=(5,5)",128,0,77,0
  95               		.stabs	"uint_farptr_t:t(3,2)=(5,6)",128,0,81,0
  96               		.stabn	162,0,0,0
  97               		.stabs	"/usr/avr/include/avr/io.h",130,0,0,0
  98               		.stabs	"/usr/avr/include/avr/fuse.h",130,0,0,0
  99               		.stabs	"__fuse_t:t(7,1)=(7,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,244,0
 100               		.stabn	162,0,0,0
 101               		.stabn	162,0,0,0
 102               		.stabs	"/usr/avr/include/avr/pgmspace.h",130,0,0,0
 103               		.stabs	"/usr/lib/gcc/avr/4.8.2/include/stddef.h",130,0,0,0
 104               		.stabs	"size_t:t(9,1)=(0,4)",128,0,212,0
 105               		.stabn	162,0,0,0
 106               		.stabn	162,0,0,0
 107               		.stabn	162,0,0,0
 108               		.stabn	162,0,0,0
 109               		.stabs	"ir_init:F(0,47)",36,0,4,ir_init
 110               	.global	ir_init
 111               		.type	ir_init, @function
 112               	ir_init:
 113               		.stabd	46,0,0
   1:../../lib/ir.c **** #include "config.h"
GAS LISTING /tmp/ccS9MIwy.s 			page 3


   2:../../lib/ir.c **** #include "ir.h"
   3:../../lib/ir.c **** 
   4:../../lib/ir.c **** void ir_init(void) {
 114               		.stabn	68,0,4,.LM0-.LFBB1
 115               	.LM0:
 116               	.LFBB1:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
   5:../../lib/ir.c ****     _ON(IR_OUT_DDR, IR_OUT_PIN);
 121               		.stabn	68,0,5,.LM1-.LFBB1
 122               	.LM1:
 123 0000 3D9A      		sbi 0x7,5
 124 0002 0895      		ret
 125               		.size	ir_init, .-ir_init
 126               	.Lscope1:
 127               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 128               		.stabd	78,0,0
 129               		.stabs	"ir_xmit_hdr:F(0,47)",36,0,8,ir_xmit_hdr
 130               	.global	ir_xmit_hdr
 131               		.type	ir_xmit_hdr, @function
 132               	ir_xmit_hdr:
 133               		.stabd	46,0,0
   6:../../lib/ir.c **** }
   7:../../lib/ir.c **** 
   8:../../lib/ir.c **** void ir_xmit_hdr(void) {
 134               		.stabn	68,0,8,.LM2-.LFBB2
 135               	.LM2:
 136               	.LFBB2:
 137               	/* prologue: function */
 138               	/* frame size = 0 */
 139               	/* stack size = 0 */
 140               	.L__stack_usage = 0
   9:../../lib/ir.c ****     _ON(IR_OUT_PORT, IR_OUT_PIN);
 141               		.stabn	68,0,9,.LM3-.LFBB2
 142               	.LM3:
 143 0004 459A      		sbi 0x8,5
 144               	.LBB14:
 145               	.LBB15:
 146               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext1
 147               	.Ltext1:
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
GAS LISTING /tmp/ccS9MIwy.s 			page 4


  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/avr/include/util/delay.h **** #endif
  41:/usr/avr/include/util/delay.h **** 
  42:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/avr/include/util/delay.h **** #include <math.h>
  45:/usr/avr/include/util/delay.h **** 
  46:/usr/avr/include/util/delay.h **** /** \file */
  47:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/avr/include/util/delay.h ****     \code
  49:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/avr/include/util/delay.h ****     \endcode
  53:/usr/avr/include/util/delay.h **** 
  54:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/avr/include/util/delay.h ****     used.
  58:/usr/avr/include/util/delay.h **** 
  59:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/avr/include/util/delay.h **** 
  68:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
GAS LISTING /tmp/ccS9MIwy.s 			page 5


  73:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/avr/include/util/delay.h **** 
  77:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/avr/include/util/delay.h **** 
  81:/usr/avr/include/util/delay.h **** */
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/avr/include/util/delay.h **** #endif
  87:/usr/avr/include/util/delay.h **** 
  88:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/avr/include/util/delay.h **** #endif
  93:/usr/avr/include/util/delay.h **** 
  94:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/avr/include/util/delay.h **** #endif
  97:/usr/avr/include/util/delay.h **** 
  98:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/avr/include/util/delay.h **** #endif
 103:/usr/avr/include/util/delay.h **** 
 104:/usr/avr/include/util/delay.h **** /**
 105:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/avr/include/util/delay.h **** 
 107:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/avr/include/util/delay.h **** 
 109:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/avr/include/util/delay.h **** 
 112:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/avr/include/util/delay.h **** 
 114:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/avr/include/util/delay.h **** 
 120:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/avr/include/util/delay.h **** 
 125:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
GAS LISTING /tmp/ccS9MIwy.s 			page 6


 130:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/avr/include/util/delay.h **** 
 132:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/avr/include/util/delay.h **** 
 140:/usr/avr/include/util/delay.h ****  */
 141:/usr/avr/include/util/delay.h **** void
 142:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/avr/include/util/delay.h **** {
 144:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/avr/include/util/delay.h **** 
 153:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/avr/include/util/delay.h **** 
 156:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/avr/include/util/delay.h **** 
 159:/usr/avr/include/util/delay.h **** 	#else
 160:/usr/avr/include/util/delay.h **** 		//round up by default
 161:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/avr/include/util/delay.h **** 	#endif
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 148               		.stabn	68,0,164,.LM4-.LFBB2
 149               	.LM4:
 150 0006 8FE3      		ldi r24,lo8(-25537)
 151 0008 9CE9      		ldi r25,hi8(-25537)
 152 000a 0197      		1: sbiw r24,1
 153 000c 01F4      		brne 1b
 154 000e 00C0      		rjmp .
 155 0010 0000      		nop
 156               	.LBE15:
 157               	.LBE14:
 158               	.LBB16:
 159               	.LBB17:
 165:/usr/avr/include/util/delay.h **** 
 166:/usr/avr/include/util/delay.h **** #else
 167:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/avr/include/util/delay.h **** 	{
 172:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/avr/include/util/delay.h **** 		while(__ticks)
GAS LISTING /tmp/ccS9MIwy.s 			page 7


 175:/usr/avr/include/util/delay.h **** 		{
 176:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/avr/include/util/delay.h **** 		}
 180:/usr/avr/include/util/delay.h **** 		return;
 181:/usr/avr/include/util/delay.h **** 	}
 182:/usr/avr/include/util/delay.h **** 	else
 183:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/avr/include/util/delay.h **** #endif
 186:/usr/avr/include/util/delay.h **** }
 187:/usr/avr/include/util/delay.h **** 
 188:/usr/avr/include/util/delay.h **** /**
 189:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/avr/include/util/delay.h **** 
 191:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/avr/include/util/delay.h **** 
 193:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/avr/include/util/delay.h **** 
 196:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/avr/include/util/delay.h **** 
 198:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/avr/include/util/delay.h **** 
 202:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/avr/include/util/delay.h ****   
 207:/usr/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/avr/include/util/delay.h **** 
 211:/usr/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/avr/include/util/delay.h ****  
 214:/usr/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****  */
 223:/usr/avr/include/util/delay.h **** void
 224:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/avr/include/util/delay.h **** {
 226:/usr/avr/include/util/delay.h **** 	uint8_t __ticks;
 227:/usr/avr/include/util/delay.h **** 	double __tmp ; 
 228:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 229:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 230:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 231:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
GAS LISTING /tmp/ccS9MIwy.s 			page 8


 232:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 233:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 234:/usr/avr/include/util/delay.h **** 
 235:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 236:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 237:/usr/avr/include/util/delay.h **** 
 238:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 239:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h **** 	#else
 242:/usr/avr/include/util/delay.h **** 		//round up by default
 243:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 244:/usr/avr/include/util/delay.h **** 	#endif
 245:/usr/avr/include/util/delay.h **** 
 246:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 160               		.stabn	68,0,246,.LM5-.LFBB2
 161               	.LM5:
 162 0012 86E6      		ldi r24,lo8(4454)
 163 0014 91E1      		ldi r25,hi8(4454)
 164 0016 0197      		1: sbiw r24,1
 165 0018 01F4      		brne 1b
 166 001a 00C0      		rjmp .
 167 001c 0000      		nop
 168               	.LBE17:
 169               	.LBE16:
 170               		.stabs	"../../lib/ir.c",132,0,0,.Ltext2
 171               	.Ltext2:
  10:../../lib/ir.c ****     _delay_ms(8);
  11:../../lib/ir.c ****     _delay_us(891);
  12:../../lib/ir.c **** 
  13:../../lib/ir.c ****     _OFF(IR_OUT_PORT, IR_OUT_PIN);
 172               		.stabn	68,0,13,.LM6-.LFBB2
 173               	.LM6:
 174 001e 4598      		cbi 0x8,5
 175               	.LBB18:
 176               	.LBB19:
 177               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext3
 178               	.Ltext3:
 164:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 179               		.stabn	68,0,164,.LM7-.LFBB2
 180               	.LM7:
 181 0020 8FE1      		ldi r24,lo8(19999)
 182 0022 9EE4      		ldi r25,hi8(19999)
 183 0024 0197      		1: sbiw r24,1
 184 0026 01F4      		brne 1b
 185 0028 00C0      		rjmp .
 186 002a 0000      		nop
 187               	.LBE19:
 188               	.LBE18:
 189               	.LBB20:
 190               	.LBB21:
 191               		.stabn	68,0,246,.LM8-.LFBB2
 192               	.LM8:
 193 002c 8DE0      		ldi r24,lo8(2829)
 194 002e 9BE0      		ldi r25,hi8(2829)
 195 0030 0197      		1: sbiw r24,1
 196 0032 01F4      		brne 1b
GAS LISTING /tmp/ccS9MIwy.s 			page 9


 197 0034 00C0      		rjmp .
 198 0036 0000      		nop
 199 0038 0895      		ret
 200               	.LBE21:
 201               	.LBE20:
 202               		.size	ir_xmit_hdr, .-ir_xmit_hdr
 203               	.Lscope2:
 204               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 205               		.stabd	78,0,0
 206               		.stabs	"ir_xmit:F(0,47)",36,0,18,ir_xmit
 207               		.stabs	"v:P(5,2)",64,0,18,24
 208               	.global	ir_xmit
 209               		.type	ir_xmit, @function
 210               	ir_xmit:
 211               		.stabd	46,0,0
 212               		.stabs	"../../lib/ir.c",132,0,0,.Ltext4
 213               	.Ltext4:
  14:../../lib/ir.c ****     _delay_ms(4);
  15:../../lib/ir.c ****     _delay_us(566);
  16:../../lib/ir.c **** }
  17:../../lib/ir.c **** 
  18:../../lib/ir.c **** void ir_xmit(uint8_t v) {
 214               		.stabn	68,0,18,.LM9-.LFBB3
 215               	.LM9:
 216               	.LFBB3:
 217               	/* prologue: function */
 218               	/* frame size = 0 */
 219               	/* stack size = 0 */
 220               	.L__stack_usage = 0
  19:../../lib/ir.c ****     if (v) {
 221               		.stabn	68,0,19,.LM10-.LFBB3
 222               	.LM10:
 223 003a 8823      		tst r24
 224 003c 01F0      		breq .L4
  20:../../lib/ir.c ****         _ON(IR_OUT_PORT, IR_OUT_PIN);
 225               		.stabn	68,0,20,.LM11-.LFBB3
 226               	.LM11:
 227 003e 459A      		sbi 0x8,5
 228 0040 00C0      		rjmp .L5
 229               	.L4:
  21:../../lib/ir.c ****     } else {
  22:../../lib/ir.c ****         _OFF(IR_OUT_PORT, IR_OUT_PIN);
 230               		.stabn	68,0,22,.LM12-.LFBB3
 231               	.LM12:
 232 0042 4598      		cbi 0x8,5
 233               	.L5:
 234               	.LBB22:
 235               	.LBB23:
 236               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext5
 237               	.Ltext5:
 238               		.stabn	68,0,246,.LM13-.LFBB3
 239               	.LM13:
 240 0044 82E5      		ldi r24,lo8(3154)
 241 0046 9CE0      		ldi r25,hi8(3154)
 242 0048 0197      		1: sbiw r24,1
 243 004a 01F4      		brne 1b
 244 004c 00C0      		rjmp .
GAS LISTING /tmp/ccS9MIwy.s 			page 10


 245 004e 0000      		nop
 246               	.LBE23:
 247               	.LBE22:
 248               		.stabs	"../../lib/ir.c",132,0,0,.Ltext6
 249               	.Ltext6:
  23:../../lib/ir.c ****     }
  24:../../lib/ir.c ****     _delay_us(631);
  25:../../lib/ir.c **** 
  26:../../lib/ir.c ****     _OFF(IR_OUT_PORT, IR_OUT_PIN);
 250               		.stabn	68,0,26,.LM14-.LFBB3
 251               	.LM14:
 252 0050 4598      		cbi 0x8,5
 253               	.LBB24:
 254               	.LBB25:
 255               		.stabs	"/usr/avr/include/util/delay.h",132,0,0,.Ltext7
 256               	.Ltext7:
 257               		.stabn	68,0,246,.LM15-.LFBB3
 258               	.LM15:
 259 0052 82E5      		ldi r24,lo8(3154)
 260 0054 9CE0      		ldi r25,hi8(3154)
 261 0056 0197      		1: sbiw r24,1
 262 0058 01F4      		brne 1b
 263 005a 00C0      		rjmp .
 264 005c 0000      		nop
 265 005e 0895      		ret
 266               	.LBE25:
 267               	.LBE24:
 268               		.size	ir_xmit, .-ir_xmit
 269               	.Lscope3:
 270               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 271               		.stabd	78,0,0
 272               		.stabs	"ir_send:F(0,47)",36,0,30,ir_send
 273               		.stabs	"len:P(5,2)",64,0,30,13
 274               	.global	ir_send
 275               		.type	ir_send, @function
 276               	ir_send:
 277               		.stabd	46,0,0
 278               		.stabs	"../../lib/ir.c",132,0,0,.Ltext8
 279               	.Ltext8:
  27:../../lib/ir.c ****     _delay_us(631);
  28:../../lib/ir.c **** }
  29:../../lib/ir.c **** 
  30:../../lib/ir.c **** void ir_send(uint8_t *data, uint8_t len) {
 280               		.stabn	68,0,30,.LM16-.LFBB4
 281               	.LM16:
 282               	.LFBB4:
 283 0060 AF92      		push r10
 284 0062 BF92      		push r11
 285 0064 CF92      		push r12
 286 0066 DF92      		push r13
 287 0068 EF92      		push r14
 288 006a FF92      		push r15
 289 006c 0F93      		push r16
 290 006e 1F93      		push r17
 291 0070 CF93      		push r28
 292 0072 DF93      		push r29
 293 0074 00D0      		rcall .
GAS LISTING /tmp/ccS9MIwy.s 			page 11


 294 0076 CDB7      		in r28,__SP_L__
 295 0078 DEB7      		in r29,__SP_H__
 296               	/* prologue: function */
 297               	/* frame size = 2 */
 298               	/* stack size = 12 */
 299               	.L__stack_usage = 12
 300 007a D62E      		mov r13,r22
  31:../../lib/ir.c ****     uint8_t btmp;
  32:../../lib/ir.c ****     uint8_t byte, bit;
  33:../../lib/ir.c **** 
  34:../../lib/ir.c ****     ir_xmit_hdr();
 301               		.stabn	68,0,34,.LM17-.LFBB4
 302               	.LM17:
 303 007c 8983      		std Y+1,r24
 304 007e 9A83      		std Y+2,r25
 305 0080 0E94 0000 		call ir_xmit_hdr
 306 0084 8981      		ldd r24,Y+1
 307 0086 C82E      		mov r12,r24
  35:../../lib/ir.c **** 
  36:../../lib/ir.c ****     for ( byte=0 ; byte<len ; byte++ ) {
 308               		.stabn	68,0,36,.LM18-.LFBB4
 309               	.LM18:
 310 0088 A82E      		mov r10,r24
 311 008a 9A81      		ldd r25,Y+2
 312 008c B92E      		mov r11,r25
 313               	.L8:
 314 008e 8A2D      		mov r24,r10
 315 0090 8C19      		sub r24,r12
 316               		.stabn	68,0,36,.LM19-.LFBB4
 317               	.LM19:
 318 0092 8D15      		cp r24,r13
 319 0094 00F4      		brsh .L16
  37:../../lib/ir.c ****         btmp = data[byte];
 320               		.stabn	68,0,37,.LM20-.LFBB4
 321               	.LM20:
 322 0096 F501      		movw r30,r10
 323 0098 E190      		ld r14,Z+
 324 009a 5F01      		movw r10,r30
 325 009c 07E0      		ldi r16,lo8(7)
 326 009e 10E0      		ldi r17,0
  38:../../lib/ir.c **** 
  39:../../lib/ir.c ****         for ( bit=0 ; bit<8 ; bit++ ) {
  40:../../lib/ir.c ****             if ((btmp & _BV(7-bit)) != 0) {
 327               		.stabn	68,0,40,.LM21-.LFBB4
 328               	.LM21:
 329 00a0 F12C      		mov r15,__zero_reg__
 330               	.L12:
 331 00a2 C701      		movw r24,r14
 332 00a4 002E      		mov r0,r16
 333 00a6 00C0      		rjmp 2f
 334               		1:
 335 00a8 9595      		asr r25
 336 00aa 8795      		ror r24
 337               		2:
 338 00ac 0A94      		dec r0
 339 00ae 02F4      		brpl 1b
 340 00b0 80FF      		sbrs r24,0
GAS LISTING /tmp/ccS9MIwy.s 			page 12


 341 00b2 00C0      		rjmp .L9
  41:../../lib/ir.c ****                 ir_xmit(1);
 342               		.stabn	68,0,41,.LM22-.LFBB4
 343               	.LM22:
 344 00b4 81E0      		ldi r24,lo8(1)
 345 00b6 00C0      		rjmp .L15
 346               	.L9:
  42:../../lib/ir.c ****             } else {
  43:../../lib/ir.c ****                 ir_xmit(0);
 347               		.stabn	68,0,43,.LM23-.LFBB4
 348               	.LM23:
 349 00b8 80E0      		ldi r24,0
 350               	.L15:
 351 00ba 0E94 0000 		call ir_xmit
 352 00be 0150      		subi r16,1
 353 00c0 1109      		sbc r17,__zero_reg__
 354 00c2 00F4      		brcc .L12
 355 00c4 00C0      		rjmp .L8
 356               	.L16:
 357               	/* epilogue start */
  44:../../lib/ir.c ****             }
  45:../../lib/ir.c ****         }
  46:../../lib/ir.c ****     }
  47:../../lib/ir.c **** }
 358               		.stabn	68,0,47,.LM24-.LFBB4
 359               	.LM24:
 360 00c6 0F90      		pop __tmp_reg__
 361 00c8 0F90      		pop __tmp_reg__
 362 00ca DF91      		pop r29
 363 00cc CF91      		pop r28
 364 00ce 1F91      		pop r17
 365 00d0 0F91      		pop r16
 366 00d2 FF90      		pop r15
 367 00d4 EF90      		pop r14
 368 00d6 DF90      		pop r13
 369 00d8 CF90      		pop r12
 370 00da BF90      		pop r11
 371 00dc AF90      		pop r10
 372 00de 0895      		ret
 373               		.size	ir_send, .-ir_send
 374               		.stabs	"btmp:r(5,2)",64,0,31,14
 375               		.stabn	192,0,0,.LFBB4-.LFBB4
 376               		.stabn	224,0,0,.Lscope4-.LFBB4
 377               	.Lscope4:
 378               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 379               		.stabd	78,0,0
 380               		.stabs	"",100,0,0,.Letext0
 381               	.Letext0:
 382               		.ident	"GCC: (GNU) 4.8.2"
GAS LISTING /tmp/ccS9MIwy.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ir.c
     /tmp/ccS9MIwy.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccS9MIwy.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccS9MIwy.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccS9MIwy.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccS9MIwy.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccS9MIwy.s:112    .text:0000000000000000 ir_init
     /tmp/ccS9MIwy.s:132    .text:0000000000000004 ir_xmit_hdr
     /tmp/ccS9MIwy.s:210    .text:000000000000003a ir_xmit
     /tmp/ccS9MIwy.s:276    .text:0000000000000060 ir_send

NO UNDEFINED SYMBOLS
