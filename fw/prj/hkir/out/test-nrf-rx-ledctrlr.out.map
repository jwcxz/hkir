Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o (exit)
/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
                              ./out/main.o (__do_copy_data)
/usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                              ./out/main.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

rxbuf               0x19              ./out/main.o
rx_packet_buffer    0x2               ./out/nrf.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
LOAD /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/libm.a
LOAD ./out/main.o
LOAD ./out/dbg.o
LOAD ./out/nrf.o
LOAD ./out/nrfspi_usart.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x76c
 *(.vectors)
 .vectors       0x0000000000000000       0x68 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000068                . = ALIGN (0x2)
                0x0000000000000068                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000068        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000068                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000068                __ctors_start = .
 *(.ctors)
                0x0000000000000068                __ctors_end = .
                0x0000000000000068                __dtors_start = .
 *(.dtors)
                0x0000000000000068                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000068        0x0 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
                0x0000000000000068                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000068        0xc /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000074       0x16 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
                0x0000000000000074                __do_copy_data
 .init4         0x000000000000008a       0x10 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                0x000000000000008a                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x000000000000009a        0x8 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 *(.init9)
 *(.text)
 .text          0x00000000000000a2        0x4 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
                0x00000000000000a2                __vector_22
                0x00000000000000a2                __vector_24
                0x00000000000000a2                __vector_12
                0x00000000000000a2                __bad_interrupt
                0x00000000000000a2                __vector_6
                0x00000000000000a2                __vector_3
                0x00000000000000a2                __vector_23
                0x00000000000000a2                __vector_25
                0x00000000000000a2                __vector_11
                0x00000000000000a2                __vector_13
                0x00000000000000a2                __vector_17
                0x00000000000000a2                __vector_19
                0x00000000000000a2                __vector_7
                0x00000000000000a2                __vector_5
                0x00000000000000a2                __vector_4
                0x00000000000000a2                __vector_9
                0x00000000000000a2                __vector_2
                0x00000000000000a2                __vector_21
                0x00000000000000a2                __vector_15
                0x00000000000000a2                __vector_8
                0x00000000000000a2                __vector_14
                0x00000000000000a2                __vector_10
                0x00000000000000a2                __vector_16
                0x00000000000000a2                __vector_18
                0x00000000000000a2                __vector_20
 .text          0x00000000000000a6        0x0 ./out/main.o
 .text          0x00000000000000a6       0x4e ./out/dbg.o
                0x00000000000000a6                dbg_set
                0x00000000000000b8                dbg_on
                0x00000000000000ce                dbg_off
                0x00000000000000e6                dbg_init
 .text          0x00000000000000f4      0x574 ./out/nrf.o
                0x00000000000000f4                nrf_enable_irq
                0x00000000000000fa                nrf_disable_irq
                0x0000000000000102                nrf_wait_for_rxpacket
                0x000000000000010c                nrf_isready_packet
                0x0000000000000112                nrf_accept_packet
                0x000000000000011a                nrf_ce_on
                0x000000000000011e                nrf_ce_off
                0x0000000000000122                nrf_txpayload
                0x0000000000000150                nrf_rxpayload
                0x000000000000017c                nrf_regwr_long
                0x00000000000001c2                nrf_regrd_long
                0x0000000000000206                nrf_regwr
                0x000000000000023e                nrf_set_channel
                0x0000000000000248                __vector_1
                0x00000000000002c2                nrf_regrd
                0x00000000000002ee                nrf_init
                0x0000000000000382                nrf_set_power
                0x000000000000039c                nrf_enable_pipe
                0x0000000000000410                nrf_disable_pipe
                0x0000000000000432                nrf_flushtx
                0x0000000000000478                nrf_flushrx
                0x000000000000049c                nrf_stop_receiver
                0x00000000000004a8                nrf_setmode
                0x00000000000004e2                nrf_start_receiver
                0x00000000000004f4                nrf_reusetx
                0x0000000000000518                nrf_rxplwidth
                0x0000000000000542                nrf_ackpl
                0x000000000000058a                nrf_txnoack
                0x00000000000005d2                nrf_status
                0x00000000000005f6                nrf_transmit_packet
 .text          0x0000000000000668       0xb4 ./out/nrfspi_usart.o
                0x0000000000000668                nrfspi_init
                0x000000000000067a                nrfspi_enable
                0x0000000000000698                nrfspi_disable
                0x00000000000006a4                nrfspi_txrx
                0x00000000000006fa                nrfspi_txrx_byte
                0x0000000000000714                nrfspi_cs_en
                0x0000000000000718                nrfspi_cs_ds
 .text          0x000000000000071c        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text          0x000000000000071c        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text          0x000000000000071c        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                0x000000000000071c                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x000000000000071c       0x4c ./out/main.o
                0x000000000000071c                main
 .text.libgcc.mul
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
                0x0000000000000768                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000768        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
                0x0000000000000768                exit
                0x0000000000000768                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000768        0x4 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x000000000000076c                _etext = .

.data           0x0000000000800100        0x6 load address 0x000000000000076c
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 .data          0x0000000000800100        0x5 ./out/main.o
                0x0000000000800100                my_addr
 .data          0x0000000000800105        0x0 ./out/dbg.o
 .data          0x0000000000800105        0x0 ./out/nrf.o
 .data          0x0000000000800105        0x0 ./out/nrfspi_usart.o
 .data          0x0000000000800105        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800105        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000800105        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800106                . = ALIGN (0x2)
 *fill*         0x0000000000800105        0x1 
                0x0000000000800106                _edata = .
                0x0000000000800106                PROVIDE (__data_end, .)

.bss            0x0000000000800106       0x1c
                0x0000000000800106                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 .bss           0x0000000000800106        0x0 ./out/main.o
 .bss           0x0000000000800106        0x0 ./out/dbg.o
 .bss           0x0000000000800106        0x1 ./out/nrf.o
                0x0000000000800106                packet_ready
 .bss           0x0000000000800107        0x0 ./out/nrfspi_usart.o
 .bss           0x0000000000800107        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_exit.o)
 .bss           0x0000000000800107        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_copy_data.o)
 .bss           0x0000000000800107        0x0 /usr/lib/gcc/avr/4.8.2/avr5/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800107       0x19 ./out/main.o
                0x0000000000800107                rxbuf
 COMMON         0x0000000000800120        0x2 ./out/nrf.o
                0x0000000000800120                rx_packet_buffer
                0x0000000000800122                PROVIDE (__bss_end, .)
                0x000000000000076c                __data_load_start = LOADADDR (.data)
                0x0000000000000772                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800122        0x0
                0x0000000000800122                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800122                PROVIDE (__noinit_end, .)
                0x0000000000800122                _end = .
                0x0000000000800122                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x2cb8
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o
 .stab          0x00000000000006cc      0x618 ./out/main.o
                                        0x624 (size before relaxing)
 .stab          0x0000000000000ce4      0x468 ./out/dbg.o
                                        0x654 (size before relaxing)
 .stab          0x000000000000114c     0x1524 ./out/nrf.o
                                       0x1740 (size before relaxing)
 .stab          0x0000000000002670      0x648 ./out/nrfspi_usart.o
                                        0x840 (size before relaxing)

.stabstr        0x0000000000000000     0x134a
 *(.stabstr)
 .stabstr       0x0000000000000000     0x134a /usr/lib/gcc/avr/4.8.2/../../../../avr/lib/avr5/crtm168p.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 ./out/main.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 ./out/dbg.o
 .comment       0x0000000000000000       0x12 ./out/nrf.o
 .comment       0x0000000000000000       0x12 ./out/nrfspi_usart.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(./out/test-nrf-rx-ledctrlr.out elf32-avr)
LOAD linker stubs
